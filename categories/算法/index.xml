<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 109km is a distance.</title>
    <link>https://109km.github.io/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 109km is a distance.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Dec 2020 18:00:00 +0800</lastBuildDate><atom:link href="https://109km.github.io/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浅入哈希表</title>
      <link>https://109km.github.io/posts/hash-table-in-fe/</link>
      <pubDate>Sun, 13 Dec 2020 18:00:00 +0800</pubDate>
      
      <guid>https://109km.github.io/posts/hash-table-in-fe/</guid>
      <description>HashTable introductions HashTable It&amp;rsquo;s easy to find this structure around us, like the ID card&amp;rsquo;s number is a kind of hash table:
Different digit indicates different message. We have to convert the whole string of numbers to its real meanings.
Like if 61 shows in position of province, it means ShaanXi Province, and in this case the city&amp;rsquo;s number 01 means Xi&#39;an.
But when province&amp;rsquo;s number is 11, city&amp;rsquo;s number 01 means Beijing.</description>
    </item>
    
    <item>
      <title>队列的使用</title>
      <link>https://109km.github.io/posts/queue/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0800</pubDate>
      
      <guid>https://109km.github.io/posts/queue/</guid>
      <description>Queue One-way queue Queue&amp;rsquo;s structure is simple, check out the picture below:
And the implementation is simple too.
This version of implementation supports 6 actions: enqueue dequeue isEmpty front end clear and one property size.
class Queue { constructor() { this.elements = []; } get size() { return this.elements.length; } enqueue(el) { this.elements.push(el); } dequeue() { return this.elements.shift(); } isEmpty() { return this.elements.length === 0 ? true : false; } front() { return this.</description>
    </item>
    
    <item>
      <title>前端开发中的栈</title>
      <link>https://109km.github.io/posts/stack-in-front-end/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0800</pubDate>
      
      <guid>https://109km.github.io/posts/stack-in-front-end/</guid>
      <description>Stack in front end A brief introduction of stack This data structure is like a cup, if we pouring some water into the cup, the last water to be poured is the first to be drunk.
In another word, this structure reverses the origin order: first in last out.
The picture below shows how the mechanism works.
Here is the example implementation of stack:
class Stack { constructor() { this.elements = []; } get length() { return this.</description>
    </item>
    
    <item>
      <title>链表入门</title>
      <link>https://109km.github.io/posts/linked-list/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
      
      <guid>https://109km.github.io/posts/linked-list/</guid>
      <description>Linked List Singly Linked List The singly linked list is easy to understand. Its structure is as the picture showed below.
This structure is like a chain, and there could be many nodes in the chain. It has 3 features:
  Each node has two properties: data and next. data stores the value and next points to the next node.
  Each list must have a head node, it&amp;rsquo;s the start of the chain.</description>
    </item>
    
    <item>
      <title>LRU淘汰策略在前端中的应用</title>
      <link>https://109km.github.io/posts/algorithm-lru/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0800</pubDate>
      
      <guid>https://109km.github.io/posts/algorithm-lru/</guid>
      <description>LRU algorithm in front end LRU evict policy When we are using browsers, they can cache many web resources for us. But the storage is always limited. When the cache capacity reaches maximum, what the browsers will do?
In short, the browsers will clean the least recently used items. The policy is quite easy to understand from its name.
For example:
// Let&amp;#39;s assume the cache can only store 3 resouces.</description>
    </item>
    
  </channel>
</rss>
