<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on 109km is a distance.</title>
    <link>http://example.org/categories/react/</link>
    <description>Recent content in react on 109km is a distance.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Nov 2017 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/categories/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【React - 02】React Component生命周期详解</title>
      <link>http://example.org/posts/react-lifecycle-02/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/react-lifecycle-02/</guid>
      <description>为什么需要明白Component生命周期？ React Component生命周期是React的重要设计思想和概念之一。所以如果想更深入了解React的工作机制，更好的使用React进行实战，这里就是开始。
Before 生命周期 Component设计思想 Component是从有限状态机（FSM）的思想中衍生出来的一个模型。主要工作原理跟有限状态机几乎一样：通过状态、条件、动作来描述信息流转。
有限状态机的动作一般有下面几种：
 进入动作：在进入状态时进行 退出动作：在退出状态时进行 输入动作：依赖于当前状态和输入条件进行 转移动作：在进行特定转移时进行  如下图（图片来自这里），通过这个图可以清楚看到数据在每个节点不同状态时候形成了不同的转换，最终形成有限状态机。说的生动一点：想象数据是河水，然后我们设置关卡控制河水的流向，运动，停止。

During 生命周期 Component Initialization 在这个阶段实例首次被创建，后面创建的实例会与第一次创建的实例在此阶段稍有不同。下面是这个阶段中会顺序执行的函数。
getDefaultProps
这个函数用于创建默认的props属性。返回值必须是 Object 或 NULL。由于这个函数比较特殊，只会在React.createClass第一次执行的时候调用一次，所以下面研究一下原因。
在创建Component的时候会调用React.createClass这个函数，这个函数实际的实现是在ReactClass.createClass里。我们看看这个函数里都执行了哪些操作：
 Constructor函数：这个Constructor中主要包含了初始化props获取initialState等功能，并没有任何与getDefaultProps有关的东西。第一次实例化后，再次调用React.createClass实际上执行的只有这个函数。
 其他部分：在Component实例化过程中只会执行一次。下面的代码就在这个部分中，所以解释了为什么getDefaultProps只会执行一次。
// Initialize the defaultProps property after all mixins have been merged. if (Constructor.getDefaultProps) { Constructor.defaultProps = Constructor.getDefaultProps(); }   
 ps:更详细和具体的过程我也不清楚，希望有大神指导。
 getInitialState
这个函数用于创建Component的初始化state。返回值必须是 Object 或 NULL。
此函数会在每次Component创建的时候被调用。
componentWillMount
这个函数在Component每次被创建的阶段都会被调用，代表的意思是：组件即将创建。在server和client都会调用。
render
这个函数是进行Component渲染的，React会将Component输出到页面中。server和client都会触发。
componentDidMount
这个函数是在Component渲染完毕之后触发。只在客户端触发，server不会触发

Component Creating（创建） 这个阶段是Component创建期，在这个阶段主要有以下几个方法会被触发。</description>
    </item>
    
    <item>
      <title>【React - 01】What’s React</title>
      <link>http://example.org/posts/what-is-react-01/</link>
      <pubDate>Mon, 06 Nov 2017 15:47:12 +0800</pubDate>
      
      <guid>http://example.org/posts/what-is-react-01/</guid>
      <description>React初识 React只是MVC中的V。
React核心是Component，Component是html / javascript的合集。

React相关基础概念 
JSX 在javascript中写HTML的语法工具。

Virtual DOM 虚拟DOM。React自己生成的一套DOM系统，用于渲染真实的DOM。

React.createClass 创建一个Component的方法。

render(method) Component的HTML模板。

React.render 渲染React Component到真实的DOM结点上。

state Component的状态，其实就是Component的内置数据，通过更改state属性，可以对实现对Component的更新。 例如，下面的代码里通过this.state.name控制Component中的内容展示。
render: function() { return ( &amp;lt;header&amp;gt; { this.state.name ? this.state.name : &amp;lt;span&amp;gt;Not Logged In&amp;lt;/span&amp;gt; } &amp;lt;/header&amp;gt; ); }  
getInitialState 获取Component的初始化state。

setState 设置Component的state属性。

props 父级Component传递给子级Component的属性。比如onClick也是props的一种。在下面这个例子中父级节点  传递了 name=“Tyler” 给子节点 
var HelloUser = React.createClass({ render: function(){ return ( &amp;lt;div&amp;gt; Hello, {this.</description>
    </item>
    
  </channel>
</rss>